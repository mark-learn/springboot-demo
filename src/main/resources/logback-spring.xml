<?xml version="1.0" encoding="UTF-8" ?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
                 当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <property name="LOG_LEVEL" value="DEBUG" scope="context"/>
    <property name="APP_NAME" value="springboot-demo" scope="context"/>
    <property name="LOG_HOME" value="/logs/${APP_NAME}" scope="context"/>

    <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>

    <!--这里指定logger name 是为jmx设置日志级别做铺垫 -->
    <jmxConfigurator/>

    <!--日志格式和颜色渲染 -->
    <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss:SSS} [%thread] %-5level %logger{36}.%M:%L - %msg%n %ex"/>
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %msg%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 控制台输出日志 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <immediateFlush>true</immediateFlush>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 输出到文件的日志 -->
    <appender name="file_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!-- 当前的日志文件存放路径 -->
        <file>${LOG_HOME}/app.log</file>
        <!-- 日志滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 历史日志文件的存放路径和名称 -->
            <fileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/app_%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 保持历史30天的日志,否则删除旧日志 -->
            <!--            <maxHistory>30</maxHistory>-->
            <!--保存最大日志大小,否则删除旧日志-->
            <!--            <totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <immediateFlush>true</immediateFlush>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <logger name="java.sql" level="INFO"></logger>
    <logger name="org.apache.ibatis" level="INFO"></logger>
    <logger name="org.mybatis" level="INFO"></logger>
    <logger name="org.springframework" level="INFO"></logger>

    <!-- 以最低的日志级别为准 -->
    <root level="DEBUG">
        <appender-ref ref="console"/>
        <appender-ref ref="file_log"/>
    </root>

    <!--不同环境使用不同的日志,开发,测试dev,test对应的是application-xxx.properties-->
    <springProfile name="dev,test">
        <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
            name:用来指定受此loger约束的某一个包或者具体的某一个类。
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
            addtivity:是否向上级loger传递打印信息。默认是true。
        -->
        <logger name="com" level="DEBUG" additivity="false">
            <!--logger 子节点 appender-ref 使用哪种日志输出策略-->
            <appender-ref ref="console"/>
            <appender-ref ref="file_log"/>
        </logger>
    </springProfile>

    <!--生产环境-->
    <springProfile name="product">
        <logger name="com" level="INFO" additivity="true">
            <appender-ref ref="console"/>
            <appender-ref ref="file_log"/>
        </logger>
    </springProfile>
</configuration>